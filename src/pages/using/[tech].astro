---
import type { GetStaticPaths } from "astro";
import { getCollection, getEntry } from "astro:content";
import StrongHeader from "../../components/StrongHeader.astro";
import Layout from "../../layouts/Regular.astro";
import WorksGrid from "../../components/WorksGrid.astro";
import { resolveAliased } from "../../aliases";
export const getStaticPaths = (async () => {
  return await getCollection("technologies").then((techs) =>
    techs.map((tech) => ({ params: { tech: tech.id } })),
  );
}) satisfies GetStaticPaths;

const technologies = await getCollection("technologies");

let tech = await getEntry("technologies", Astro.params.tech!.toString());
if (!tech) return Astro.rewrite("/404");

tech = await getEntry(
  "technologies",
  resolveAliased(tech.id, technologies) ?? tech.id,
);
if (!tech) return Astro.rewrite("/404");

const includedTechs = [
  tech.id,
  ...(tech.data.includes ?? []),
];

const works = await getCollection("works").then((works) =>
  works
    .filter(
      ({ data: work }) =>
        !work.metadata.private &&
        includedTechs.some(
          (includedTech) =>
            work.metadata.madeWith?.some(
              (mw) => resolveAliased(mw.id, technologies) === includedTech,
            ) ||
            work.metadata.additionalMetadata?.made_with
              ?.map((id) => resolveAliased(id, technologies))
              .includes(includedTech),
        ),
    )
    .map((w) => w.data),
);

const name = tech.data.name === "C Sharp" ? "C#" : tech.data.name;
---

<Layout>
  <StrongHeader
    back="/"
    title={name}
    editButton="~/projects.local/portfolio/technologies.yaml"
  >
    <div class="description" i18n set:html={tech.rendered!.html} />
    {
      tech.data["learn more at"] && (
        <a i18n href={tech.data["learn more at"]}>
          learn more
        </a>
      )
    }
  </StrongHeader>

  <WorksGrid works={works} />
</Layout>
