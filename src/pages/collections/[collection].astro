---
import type { GetStaticPaths } from "astro"
import { getCollection, getEntry } from "astro:content"
import Translated from "../../components/Translated.astro"
import StrongHeader from "../../components/StrongHeader.astro"
import WorksGrid from "../../components/WorksGrid.astro"
import Layout from "../../layouts/Layout.astro"
import picomatch from "picomatch"

export const getStaticPaths = (async () => {
  const tags = await getCollection("collections")
  return tags.map((t) => ({ params: { collection: t.id } }))
}) satisfies GetStaticPaths

const entry = await getEntry("collections", decodeURI(Astro.params.collection!.toString()))
if (!entry) return Astro.rewrite("/404")

const {
    title, includes, description, singular, plural
} = entry.data

function matchesIncludeExpresion(expr: string, work:{id: string; metadata: {tags: Array<{id: string; collection: "tags"}>}}) {
    const disjunctions = expr.split(' or ')
    return disjunctions.some(
        clause => {
            const conjunctions = clause.split(' and ')
            return conjunctions.every(term => {
                if (!term.startsWith('#')) {
                    return picomatch(term)(work.id)
                }
                return work.metadata.tags?.some(t => t.id === term.replace(/^#/, ''))
            })
        }
    )
}

const works = await getCollection("works").then((works) =>
  works
    .map((w) => w.data)
    .filter(
      (w) =>
        !w.metadata.private && matchesIncludeExpresion(includes, w)
    )
)
---

<Layout>
<StrongHeader title={title}>
    <Translated Tag="p" {...description} />
</StrongHeader>

<WorksGrid works={works} />
</Layout>
