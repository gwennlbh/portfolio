---
import type { GetStaticPaths } from "astro";
import { getCollection, getEntry } from "astro:content";
import picomatch from "picomatch";
import { resolveAliased } from "../../aliases.ts";
import StrongHeader from "../../components/StrongHeader.astro";
import WorksGrid from "../../components/WorksGrid.astro";
import Layout from "../../layouts/Regular.astro";

export const getStaticPaths = (async () => {
  const tags = await getCollection("collections");
  return tags.map((t) => ({ params: { collection: t.id } }));
}) satisfies GetStaticPaths;

const tags = await getCollection("tags");

const entry = await getEntry(
  "collections",
  decodeURI(Astro.params.collection!.toString()),
);
if (!entry) return Astro.rewrite("/404");

const { title, includes, description, singular, plural } = entry.data;

function matchesIncludeExpresion(
  expr: string,
  work: {
    id: string;
    metadata: {
      aliases: string[] | null;
      tags: Array<{ id: string; collection: "tags" }> | null;
    };
  },
) {
  const disjunctions = expr.split(" or ");
  return disjunctions.some((clause) => {
    const conjunctions = clause.split(" and ");
    return conjunctions.every((term) => {
      if (!term.startsWith("#")) {
        const aliases = work.metadata.aliases ?? [];
        return [work.id, ...aliases].some(picomatch(term));
      }

      const tagToTest = resolveAliased(term.replace(/^#/, ""), tags);
      return work.metadata.tags?.some(
        (t) => resolveAliased(t.id, tags) === tagToTest,
      );
    });
  });
}

const works = await getCollection("works").then((works) =>
  works
    .map((w) => w.data)
    .filter((w) => !w.metadata.private && matchesIncludeExpresion(includes, w)),
);
---

<Layout>
  <StrongHeader
    back="/"
    title={title}
    editButton="~/projects.local/portfolio/collections.yaml"
  >
    <div set:html={entry.rendered!.html} />
  </StrongHeader>

  <WorksGrid works={works} />
</Layout>
